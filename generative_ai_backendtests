<?php

// This file was generated by ChatGPT, as explained in the README.

use PHPUnit\Framework\TestCase;


require_once 'C:\xampp\htdocs\inc\bootstrap.php';
require_once 'C:\xampp\htdocs\config.php';
require_once 'C:\xampp\htdocs\Controller\Api\RatingController.php';

class StackTest extends PHPUnit\Framework\TestCase
{
    protected $client;

    protected function setUp() : void{
       parent::setUp();
       $this->client = new GuzzleHttp\Client([
        "base_uri" => "http://localhost:8080/index.php"]);
    }

public function testPost_CreateUser_Generated()
{
    // Scenario 1: Valid user creation
    $parameters = [
        'username' => 'new_valid_username',
        'password' => 'new_valid_password',
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/user/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(201, $response->getStatusCode());

    // Scenario 2: Duplicate username, expecting a 401 response
    $parameters = [
        'username' => 'existing_username',
        'password' => 'new_password',
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/user/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(401, $response->getStatusCode());

    // Scenario 3: Missing password, expecting a 422 response
    $parameters = [
        'username' => 'new_username_without_password',
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/user/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(422, $response->getStatusCode());

    // Scenario 1: Valid user creation
    $parameters = [
        'username' => 'new_valid_username',
        'password' => 'new_valid_password',
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/user/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(201, $response->getStatusCode());

    // Scenario 2: Duplicate username, expecting a 401 response
    $parameters = [
        'username' => 'existing_username',
        'password' => 'new_password',
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/user/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(401, $response->getStatusCode());

    // Scenario 3: Missing password, expecting a 422 response
    $parameters = [
        'username' => 'new_username_without_password',
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/user/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(422, $response->getStatusCode());
    
    
    // Add more scenarios as needed
}
public function testPost_NewSong_Generated()
{
    // Scenario 1: Valid song creation
    $parameters = [
        'username' => 'jmac041',
        'artist' => 'new_artist',
        'song' => 'new_song',
        'rating' => 5,
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/rating/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(201, $response->getStatusCode());

    // Scenario 2: Missing artist, expecting a 500 response
    $parameters = [
        'username' => 'jmac041',
        'song' => 'song_without_artist',
        'rating' => 3,
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/rating/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(500, $response->getStatusCode());

    // Scenario 3: Missing song name, expecting a 422 response
    $parameters = [
        'username' => 'jmac041',
        'artist' => 'artist_without_song',
        'rating' => 4,
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('POST', 'index.php/rating/create', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(422, $response->getStatusCode());

    // Add more scenarios as needed
}

public function testPost_updateSong_Generated()
{
    // Scenario 1: Valid song update
    $parameters = [
        'artist' => 'updated_artist',
        'song' => 'updated_song',
        'rating' => 4,
        'id' => 1,
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('PUT', 'index.php/rating/update', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(200, $response->getStatusCode());

    // Scenario 2: Attempt to update a non-existent song, expecting a 404 response
    $parameters = [
        'artist' => 'nonexistent_artist',
        'song' => 'nonexistent_song',
        'rating' => 3,
        'id' => 999, // Assuming this ID does not exist
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('PUT', 'index.php/rating/update', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(404, $response->getStatusCode());

    // Scenario 3: Missing ID, expecting a 422 response
    $parameters = [
        'artist' => 'artist_without_id',
        'song' => 'song_without_id',
        'rating' => 2,
    ];
    $json_parameters = json_encode($parameters);
    $response = $this->client->request('PUT', 'index.php/rating/update', [
        'body' => $json_parameters,
    ]);
    $this->assertEquals(422, $response->getStatusCode());
}
    // Add more scenarios as needed
}
